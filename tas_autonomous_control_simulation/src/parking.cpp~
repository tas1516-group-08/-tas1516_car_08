#include "parking.h"








void parking::LaserBackCallback(const sensor_msgs::LaserScan::ConstPtr& msg)
{
    rangesPtr = &(msg->ranges)[0];
}


// a flag method that tells us if we are controlling the car manually, automatically or in parking mode
void parking::wiiCommunicationCallback(const std_msgs::Int16MultiArray::ConstPtr& msg)
{
    control_Mode.data = msg->data[0];
	if (control_Mode.data == 2) { //Parking Control active
		parking = true;
	} else {
		parking = false;
	}
}

void parking::Start_parking(){

float abstand_karton = 0.4;
float abstand_wand = 0.25;
int detect_edge = 0;
float angle_old_l = lese_winkel(130,10);
float angle_new_l = 0;
float angle_old_r = 0;
float angle_new_r = 0;
int side = -1;


ROS_INFO("Edge detected");
//Fahre vorwärts
cmd_parking.linear.x = 0.20;
cmd_parking.angular.z = 0.0;
cmd_parking_pub.publish(cmd_parking);

ROS_INFO("Edge detected");
// Seitenwahl der Parklücke + richtiges Positionieren des Autos
    while ( detect_edge < 4){
ROS_INFO("Edge detected");
	angle_new_l = lese_winkel(130,10);


    std::stringstream ss;
        ss << (angle_new_l-angle_old_l);

    ROS_INFO("Range[0]: [%s]", ss.str().c_str());

	if (fabs(angle_new_l-angle_old_l) > 0.1 )
	{
	    detect_edge = detect_edge +1;
	    side = 1; // links
ROS_INFO("Edge detected");
	    // sensor auf der anderen seite auschalten
	}
	angle_old_l = angle_new_l;
    }

// Starte parking procedure
parking = false;
cmd_parking.linear.x = 0.0;
cmd_parking.angular.z = 0.0;
set_cmd_vel(cmd_parking);




/*
	while (lese_winkel(130,10) > abstand_karton){
	   cmd_parking.linear.x = 0.2;
	   cmd_parking.angular.z = 0.0;
	   cmd_parking_pub.publish(cmd_parking);
	}
	while ((lese_winkel(130,10) < abstand_karton)){
	    cmd_parking.linear.x = 0.2;
		cmd_parking.angular.z = 0.0;
		cmd_parking_pub.publish(cmd_parking);
	}
	while (lese_winkel(130,10) > abstand_karton){
	   cmd_parking.linear.x = 0.2;
	   cmd_parking.angular.z = 0.0;
	   cmd_parking_pub.publish(cmd_parking);
	}
	while ((lese_winkel(130,10) < abstand_karton)){
	    cmd_parking.linear.x = 0;
		cmd_parking.angular.z = 0.0;
		cmd_parking_pub.publish(cmd_parking);
	}
	while ((lese_winkel(130,10) > abstand_wand)){
	    cmd_parking.linear.x = -0.2;
		cmd_parking.angular.z = 0.2;
		cmd_parking_pub.publish(cmd_parking);
	}
	while ((lese_winkel(90,10) > abstand_wand)){
	    cmd_parking.linear.x = -0.2;
		cmd_parking.angular.z = -0.2;
		cmd_parking_pub.publish(cmd_parking);
	}
*/
}

float parking::lese_winkel(int winkel_start, int winkel_diff){
    winkel_diff = winkel_diff*3; // conversion from angle to laser scan steps
    float mean_dist = 0;
    for (int i =1; i < winkel_diff; i++){
	mean_dist = mean_dist + rangesPtr[winkel_start*3+i];
	    
    }
    mean_dist = mean_dist/winkel_diff; // build mean of read angles

return mean_dist;

}

int main(int argc, char *argv[])
{


    ros::init(argc, argv, "parking");

    parking einparken;

    cmd_parking_pub = n.advertise<geometry_msgs::Twist>("cmd_vel", 10);
	
    laser_back_sub = n.subscribe<sensor_msgs::LaserScan>("scan_back",10, &LaserBackCallback);
	
    wii_communication_sub = n.subscribe<std_msgs::Int16MultiArray>("wii_communication",1000,&wiiCommunicationCallback);



    cmd_parking.linear.x = 0.0;
    cmd_parking.angular.z = 0.0;

	while (ros::ok())
	{
        if (parking) {
ROS_INFO("start");
			Start_parking();
		}
		
		ros::spinOnce();

		loop_rate.sleep();
	}


	
    return 0;
}

void set_cmd_vel(geometry_msgs::Twist cmd_parking){

    while(cmd_parking_pub.getNumSubscribers() == 0) {
	loop_rate.sleep();
    }
    cmd_parking_pub.publish(cmd_parking);
    ros::spinOnce();

}

